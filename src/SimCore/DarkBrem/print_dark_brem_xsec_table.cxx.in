
//----------------//
//   C++ StdLib   //
//----------------//
#include <fstream>
#include <iostream>

//----------//
//   LDMX   //
//----------//
#include "Framework/Configure/Parameters.h"
#include "SimCore/DarkBrem/G4eDarkBremsstrahlung.h"

/**
 * @func printUsage
 *
 * Print how to use this executable to the terminal.
 */
void printUsage();

/**
 * The executable main for printing out the table.
 */
int main(int argc, char* argv[]) {
  if (argc < 2) {
    printUsage();
    return 1;
  }

  std::ofstream table_file(argv[1]);

  if (!table_file.is_open()) {
    std::cerr << "File '" << argv[1] << "' was not able to be opened."
              << std::endl;
    return 2;
  }

  framework::config::Parameters model;
  model.addParameter("name", std::string("vertex_library"));
  model.addParameter("library_path",
                     std::string("${DB_VERTEX_LIB_INSTALL}/mA.0.01"));
  model.addParameter("method", std::string("forward_only"));
  model.addParameter("threshold", 2.0);
  model.addParameter("epsilon", 0.01);

  framework::config::Parameters process;
  process.addParameter("model", model);
  process.addParameter("ap_mass", 10.);
  process.addParameter("enable", true);
  process.addParameter("only_one_per_event", false);
  process.addParameter("cache_xsec", true);

  simcore::darkbrem::G4eDarkBremsstrahlung db_process(process);

  table_file << db_process.getCache();

  table_file.close();

  return 0;
}

void printUsage() {
  std::cout << "Usage: print-dark-brem-xsec-table {xsec_table.csv}"
            << std::endl;
  std::cout << "     xsec_table.csv  (required) file to print table to"
            << std::endl;
}
